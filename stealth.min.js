(function() {
    const originalQuery = window.navigator.permissions.query;
    window.navigator.permissions.query = (parameters) => (
        parameters.name === 'notifications' ?
            Promise.resolve({ state: Notification.permission }) :
            originalQuery(parameters)
    );
    
    // Pass the Permissions Test.
    const originalHas = Object.prototype.hasOwnProperty;
    Object.prototype.hasOwnProperty = function(prop) {
        if (prop === 'webdriver') {
            return false;
        }
        return originalHas.call(this, prop);
    };
    
    // Pass the Chrome Test.
    window.navigator.chrome = {
        runtime: {},
    };
    
    // Pass the Permissions Test.
    window.navigator.permissions = {
        ...window.navigator.permissions,
        query: () => Promise.resolve({ state: 'denied' })
    };
    
    // Pass the Plugins Length Test.
    Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
    });
    
    // Pass the Languages Test.
    Object.defineProperty(navigator, 'languages', {
        get: () => ['en-US', 'en'],
    });
    
    // Pass the Chrome Test.
    window.chrome = {
        runtime: {},
    };
    
    // Pass the Permissions Test.
    window.navigator.permissions = {
        query: () => Promise.resolve({ state: 'denied' }),
    };
    
    // Overwrite the `webdriver` property
    Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
    });
})();
